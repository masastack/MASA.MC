@inherits AdminCompontentBase
<div @ref="Ref">
    <SheetDialog Value="@_visible" ValueChanged="HandleVisibleChanged" Title="@T("DisplayName.MessageTaskList")" ContentStyle="padding-right:80px;padding-left:80px;padding-top:40px;">
        <MCard>
            <MCardTitle class="mx-2 pt-6">
                <MTextField @bind-Value="_queryParam.Filter" Clearable Color="primary" Class="rounded-2 search" Placeholder="@T("Search")" HideDetails="@("auto")" Flat Dense Solo BackgroundColor="fill-lighten-1" OnKeyDown="SearchKeyDown" OnClearClick="HandleClearAsync">
                    <PrependInnerContent>
                        <MIcon Size=16 Class="mr-2 neutral-lighten-1--text">mdi-magnify</MIcon>
                    </PrependInnerContent>
                </MTextField>
                <MIcon Class="ml-4" OnClick="ToggleAdvanced">mdi-filter</MIcon>
            </MCardTitle>
            @if (advanced)
            {
                <MRow Class="mx-2">
                    <MCol Cols="2">
                        <MSelect @bind-Value="@_queryParam.TimeType"
                             Items="@(GetEnumList<MessageTaskTimeTypes>())"
                             Label="@T("DisplayName.MessageTaskTimeType")"
                             ItemText="@(item => T($"DisplayName.MessageTaskTimeType.{item.ToString()}"))"
                             ItemValue="item => item"
                             Dense
                             Outlined
                             Clearable
                             HideDetails="@("auto")"
                             TItem="MessageTaskTimeTypes"
                             TItemValue="MessageTaskTimeTypes"
                             TValue="MessageTaskTimeTypes?"
                             OnClearClick="RefreshAsync"
                             OnSelectedItemUpdate="RefreshAsync">
                        </MSelect>
                    </MCol>
                    <MCol Cols="2">
                        <MMenu @bind-Value="_datePickersShow"
                           CloseOnContentClick="false"
                           Transition="scale-transition"
                           OffsetY
                           MinWidth="@("auto")">
                            <ActivatorContent>
                                <MTextField Value="DateRangeText"
                                        Label="@T("DateRange")"
                                        Readonly
                                        Dense
                                        Outlined
                                        HideDetails="@("auto")"
                                        PrependInnerIcon="mdi-calendar"
                                        @attributes="context.Attrs"></MTextField>
                            </ActivatorContent>
                            <ChildContent>
                                <MDatePicker @bind-Value="_dates"
                                         Range
                                         NoTitle
                                         Scrollable>
                                    <MSpacer></MSpacer>
                                    <MButton Text
                                         Color="primary"
                                         OnClick="HandleDatePickersCancel">
                                        Cancel
                                    </MButton>
                                    <MButton Text
                                         Color="primary"
                                         OnClick="HandleDatePickersAsync">
                                        OK
                                    </MButton>
                                </MDatePicker>
                            </ChildContent>
                        </MMenu>
                    </MCol>
                    <MCol Cols="2">
                        <MSelect @bind-Value="_queryParam.ChannelId"
                             Items="@_channelItems"
                             Label="@T("DisplayName.Channel")"
                             ItemText="item => item.DisplayName"
                             ItemValue="item => item.Id"
                             Dense
                             Outlined
                             Clearable
                             HideDetails="@("auto")"
                             TItem="ChannelDto"
                             TItemValue="Guid"
                             TValue="Guid?"
                             OnClearClick="RefreshAsync"
                             OnSelectedItemUpdate="RefreshAsync">
                        </MSelect>
                    </MCol>
                    <MCol Cols="2">
                        <MSelect @bind-Value="@_queryParam.EntityType"
                             Items="@(GetEnumList<MessageEntityTypes>())"
                             Label="@T("DisplayName.MessageTaskEntityType")"
                             ItemText="@(item => T($"DisplayName.MessageEntityType.{item.ToString()}"))"
                             ItemValue="item => item"
                             Dense
                             Outlined
                             Clearable
                             HideDetails="@("auto")"
                             TItem="MessageEntityTypes"
                             TItemValue="MessageEntityTypes"
                             TValue="MessageEntityTypes?"
                             OnClearClick="RefreshAsync"
                             OnSelectedItemUpdate="RefreshAsync">
                        </MSelect>
                    </MCol>
                    <MCol Cols="2">
                        <BooleanSelect @bind-Value="_queryParam.IsEnabled" Placeholder="@T("IsEnabled")" OnClearClick="RefreshAsync"
                                   OnSelectedItemUpdate="RefreshAsync" />
                    </MCol>
                </MRow>
            }
            <MCardText>
                <MDataTable Headers="Headers" Items="_entities.Result" TItem="MessageTaskDto" ItemsPerPage="_queryParam.PageSize" HideDefaultFooter Class="user">
                    <HeaderColContent Context="header">
                        <span class="text-btn">@header.Text</span>
                    </HeaderColContent>
                    <ItemColContent>
                        @switch (context.Header.Value)
                        {
                            case ("Draft"):
                                if (context.Item.IsDraft)
                                {
                                    <MChip Ripple="false">
                                        <span>@T("Draft")</span>
                                    </MChip>
                                }
                                break;
                            case ("ChannelDisplayName"):
                                <span class="text-body3">@context.Item.Channel?.DisplayName</span>
                                break;
                            case nameof(MessageTaskDto.EntityType):
                                <span>@T($"DisplayName.MessageEntityType.{((MessageEntityTypes)context.Item.EntityType).ToString()}")</span>
                                break;
                            case (nameof(MessageTaskDto.SendTime)):
                                <span class="text-body3">@context.Item.SendTime?.ToString(T("$DateTimeFormat"))</span>
                                break;
                            case (nameof(MessageTaskDto.ModificationTime)):
                                <span class="text-body3">@context.Item.ModificationTime.ToString(T("$DateTimeFormat"))</span>
                                break;
                            case nameof(MessageTaskDto.IsEnabled):
                                <MChip Ripple="false">
                                    <span>@(context.Item.IsEnabled?T("Initiate"):T("Disable"))</span>
                                </MChip>
                                break;
                            case "Action":
                                if (context.Item.IsDraft)
                                {
                                    <MIcon Small Color="neutral-lighten-2" OnClick="async()=>await HandleEditAsync(context.Item)">mdi-pencil</MIcon>
                                }
                                else
                                {
                                    <MIcon Small Color="neutral-lighten-2" OnClick="async()=>await _detailModal.OpenModalAsync(context.Item)">mdi-eye</MIcon>
                                }
                                <MIcon Class="ml-7" Small Color="neutral-lighten-2" OnClick="async()=>await _sendTestModal.OpenModalAsync(context.Item.Id,context.Item.Channel?.Type)">mdi-bug</MIcon>
                                <MIcon Class="ml-7" Small Color="neutral-lighten-2" OnClick="async()=>await _sendModal.OpenModalAsync(context.Item)">mdi-arrow-right-drop-circle</MIcon>
                                break;
                            default:
                                <span class="text-body3">@context.Value</span>
                                break;
                        }
                    </ItemColContent>
                    <FooterContent>
                        <Pagination Class="mt-5" @bind-Page="_queryParam.Page" @bind-PageSize="_queryParam.PageSize" Total="_entities.Total" OnChange="HandlePaginationChange" />
                    </FooterContent>
                </MDataTable>
            </MCardText>
        </MCard>
    </SheetDialog>
</div>
<TemplateMessageEditModal @ref="_templateEditModal" OnOk="HandleOk" />
<OrdinaryMessageEditModal @ref="_ordinaryEditModal" OnOk="HandleOk" />
<MessageTaskSendModal @ref="_sendModal" OnOk="HandleOk" />
<MessageTaskDetailModal @ref="_detailModal" OnOk="HandleOk" />
<SendTestMessageModal @ref="_sendTestModal" OnOk="HandleOk" />
